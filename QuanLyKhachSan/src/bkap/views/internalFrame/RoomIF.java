/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bkap.views.internalFrame;

import bkap.dao.impl.CategoryRoomDAO;
import bkap.dao.impl.CheckoutProductDetailsDAO;
import bkap.dao.impl.ProductDAO;
import bkap.dao.impl.RoomDAO;
import bkap.model.CategoryRoom;
import bkap.model.CheckoutProductDetails;
import bkap.model.Product;
import bkap.model.Room;
import bkap.utils.Helper;
import bkap.utils.SystemConstant;
import bkap.utils.Utils;
import bkap.views.LoginDialog;
import bkap.views.MainJFrame;
import bkap.views.ServiceJDialog;
import java.awt.Color;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author hongb
 */
public class RoomIF extends javax.swing.JInternalFrame {

    private List<CategoryRoom> listCategoryRoom;
    private List<Room> listRoom;
    private List<Product> listProduct;
    private List<CheckoutProductDetails> listCheckoutProduct;

    private CategoryRoomDAO catRoomDAO = new CategoryRoomDAO();
    private RoomDAO roomDAO = new RoomDAO();
    private ProductDAO proDAO = new ProductDAO();
    private CheckoutProductDetailsDAO checkoutProDAO = new CheckoutProductDetailsDAO();

    private DefaultComboBoxModel cbModelCategoryRoom;
    private DefaultComboBoxModel cbModelStatusRoom;
    private DefaultComboBoxModel cbModelStatusRoomSearch;
    private DefaultComboBoxModel cbModelProduct;
    private DefaultComboBoxModel cbModelStatusProduct;
    private DefaultTableModel modeTablelRoom;
    private DefaultTableModel modelTableProduct;

    public static boolean checkFormPro = false;
    public static boolean checkClose = false;
    private int indexSelected = 0;

    private int roomId;

    private String strRoomId;
    private String typeRoom;
    private String priceRoom;
    private String imageRoom;
    private String descriptRoom;
    private String statusRoom;

    private int idProduct = 0;
    private String nameProduct;
    private String modelNameProduct;
    private String descriptProduct;
    private String statusProduct;

    private final String pathDirImage = "src\\bkap\\images\\room\\";
    private File[] filesImg = new File[0];
    private List<String> nameImg = new ArrayList<>();

    /**
     * Creates new form RoomFrame
     */
    public RoomIF() {
        Utils.setIconIF(this, Helper.getResources("tRoom"));
        initComponents();

        listCategoryRoom = catRoomDAO.findAll();
        listRoom = roomDAO.findAll();
        listProduct = proDAO.findAll();
        listCheckoutProduct = new ArrayList<>();

        cbModelCategoryRoom = (DefaultComboBoxModel) cbCategoryRoom.getModel();
        cbModelStatusRoom = (DefaultComboBoxModel) cbStatusRoom.getModel();
        cbModelStatusRoomSearch = (DefaultComboBoxModel) cbStatusRoomSearch.getModel();
        cbModelProduct = (DefaultComboBoxModel) cbProduct.getModel();
        cbModelStatusProduct = (DefaultComboBoxModel) cbStatusProduct.getModel();
        modeTablelRoom = (DefaultTableModel) tblRoom.getModel();
        modelTableProduct = (DefaultTableModel) tblProduct.getModel();

        setComboxStatusRoom();
        setComboxStatusRoomSearch();
        setComboxStatusProduct();
        setDataCombox(cbModelProduct, listProduct);
        setDataCombox(cbModelCategoryRoom, listCategoryRoom);

        setDataTable(modeTablelRoom, listRoom);

        if (LoginDialog.levelUser == SystemConstant.LEVEL_USER) {
            btnAddRoom.setEnabled(false);
            btnUpdateRoom.setEnabled(false);
            btnDeleteRoom.setEnabled(false);
        }
        setNameLabelAndButton();
    }

    public static boolean getStatus() {
        return checkClose;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lbNameRoom = new javax.swing.JLabel();
        txtRoomId = new javax.swing.JTextField();
        lbCategoryRoom = new javax.swing.JLabel();
        cbCategoryRoom = new javax.swing.JComboBox();
        lbRoomPrice = new javax.swing.JLabel();
        txtPrice = new javax.swing.JLabel();
        lbNoteRoom = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtRoomDescript = new javax.swing.JTextArea();
        lbImgDescript = new javax.swing.JLabel();
        btnChooseImg = new javax.swing.JButton();
        txtNumOfImg = new javax.swing.JLabel();
        lbStatusRoom = new javax.swing.JLabel();
        cbStatusRoom = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblRoom = new javax.swing.JTable();
        btnRefesh = new javax.swing.JButton();
        btnSearchRoom = new javax.swing.JButton();
        cbStatusRoomSearch = new javax.swing.JComboBox<String>();
        txtKeySearchRoom = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        lbProduct = new javax.swing.JLabel();
        cbProduct = new javax.swing.JComboBox();
        lbStatusProduct = new javax.swing.JLabel();
        cbStatusProduct = new javax.swing.JComboBox();
        lbNoteProduct = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtProductDescript = new javax.swing.JTextArea();
        lbModel = new javax.swing.JLabel();
        txtModelNameProduct = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblProduct = new javax.swing.JTable();
        btnAddProduct = new javax.swing.JButton();
        msgForProduct = new javax.swing.JLabel();
        btnDeleteProduct = new javax.swing.JButton();
        btnUpdateProduct = new javax.swing.JButton();
        btnSearchModel = new javax.swing.JButton();
        txtKeySearchModel = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        btnRefreshProduct = new javax.swing.JButton();
        msgInformation = new javax.swing.JLabel();
        btnUpdateRoom = new javax.swing.JButton();
        btnAddRoom = new javax.swing.JButton();
        btnDeleteRoom = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Phòng");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Phòng"));

        lbNameRoom.setText("Tên phòng");

        txtRoomId.setEditable(false);

        lbCategoryRoom.setText("Loại phòng");

        cbCategoryRoom.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbCategoryRoomItemStateChanged(evt);
            }
        });

        lbRoomPrice.setText("Giá phòng");

        txtPrice.setText("price");

        lbNoteRoom.setText("Mô tả");

        txtRoomDescript.setColumns(20);
        txtRoomDescript.setRows(5);
        jScrollPane1.setViewportView(txtRoomDescript);

        lbImgDescript.setText("Ảnh mô tả");

        btnChooseImg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bkap/images/icon/icons8_folder_20px.png"))); // NOI18N
        btnChooseImg.setText("Chọn ảnh");
        btnChooseImg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseImgActionPerformed(evt);
            }
        });

        lbStatusRoom.setText("Trạng thái");

        cbStatusRoom.setEnabled(false);

        jLabel4.setText("đ");

        tblRoom.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tên phòng", "Loại phòng", "Giá phòng", "Mô tả"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblRoom.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblRoomMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblRoom);

        btnRefesh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bkap/images/icon/icons8_refresh_20px.png"))); // NOI18N
        btnRefesh.setText("Làm mới");
        btnRefesh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefeshActionPerformed(evt);
            }
        });

        btnSearchRoom.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bkap/images/icon/icons8_search_20px.png"))); // NOI18N
        btnSearchRoom.setText("Tìm phòng");
        btnSearchRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchRoomActionPerformed(evt);
            }
        });

        cbStatusRoomSearch.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbStatusRoomSearchItemStateChanged(evt);
            }
        });

        txtKeySearchRoom.setFont(new java.awt.Font("Tahoma", 2, 13)); // NOI18N
        txtKeySearchRoom.setForeground(new java.awt.Color(153, 153, 153));
        txtKeySearchRoom.setText("Tên phòng");
        txtKeySearchRoom.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtKeySearchRoomFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtKeySearchRoomFocusLost(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lbNameRoom)
                                    .addComponent(lbCategoryRoom)
                                    .addComponent(lbRoomPrice)
                                    .addComponent(lbNoteRoom)
                                    .addComponent(lbImgDescript)
                                    .addComponent(lbStatusRoom))
                                .addGap(67, 67, 67)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(btnChooseImg)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtNumOfImg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                                .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jLabel4))
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(cbCategoryRoom, javax.swing.GroupLayout.Alignment.LEADING, 0, 386, Short.MAX_VALUE)
                                                .addComponent(txtRoomId, javax.swing.GroupLayout.Alignment.LEADING))
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(cbStatusRoom, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 383, Short.MAX_VALUE)))
                                        .addGap(0, 0, Short.MAX_VALUE)))
                                .addGap(565, 565, 565))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnRefesh)
                                .addGap(35, 35, 35)
                                .addComponent(btnSearchRoom)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtKeySearchRoom, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cbStatusRoomSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 515, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, 0))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtRoomId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbNameRoom))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbCategoryRoom)
                    .addComponent(cbCategoryRoom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbRoomPrice)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtPrice)
                                .addComponent(jLabel4)))
                        .addGap(20, 20, 20)
                        .addComponent(lbImgDescript))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnChooseImg)
                            .addComponent(txtNumOfImg, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbNoteRoom)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbStatusRoom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbStatusRoom))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRefesh)
                    .addComponent(btnSearchRoom)
                    .addComponent(txtKeySearchRoom, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbStatusRoomSearch))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Thiết bị trong phòng"));

        lbProduct.setText("Sản phẩm");

        lbStatusProduct.setText("Trạng thái");

        cbStatusProduct.setEnabled(false);

        lbNoteProduct.setText("Mô tả");

        txtProductDescript.setColumns(20);
        txtProductDescript.setRows(5);
        jScrollPane3.setViewportView(txtProductDescript);

        lbModel.setText("Model");

        tblProduct.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sản phẩm", "Model", "Trạng thái"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblProduct.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblProductMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(tblProduct);
        if (tblProduct.getColumnModel().getColumnCount() > 0) {
            tblProduct.getColumnModel().getColumn(0).setResizable(false);
            tblProduct.getColumnModel().getColumn(1).setResizable(false);
            tblProduct.getColumnModel().getColumn(2).setResizable(false);
        }

        btnAddProduct.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bkap/images/icon/icons8_add_20px.png"))); // NOI18N
        btnAddProduct.setText("Thêm thiết bị");
        btnAddProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddProductActionPerformed(evt);
            }
        });

        btnDeleteProduct.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bkap/images/icon/icons8_remove_20px.png"))); // NOI18N
        btnDeleteProduct.setText("Xóa thiết bị");
        btnDeleteProduct.setEnabled(false);
        btnDeleteProduct.setMaximumSize(new java.awt.Dimension(109, 25));
        btnDeleteProduct.setMinimumSize(new java.awt.Dimension(109, 25));
        btnDeleteProduct.setPreferredSize(new java.awt.Dimension(109, 25));
        btnDeleteProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteProductActionPerformed(evt);
            }
        });

        btnUpdateProduct.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bkap/images/icon/icons8_edit_20px.png"))); // NOI18N
        btnUpdateProduct.setText("Sửa thiết bị");
        btnUpdateProduct.setEnabled(false);
        btnUpdateProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateProductActionPerformed(evt);
            }
        });

        btnSearchModel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bkap/images/icon/icons8_search_20px.png"))); // NOI18N
        btnSearchModel.setText("Tìm model");
        btnSearchModel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchModelActionPerformed(evt);
            }
        });

        jSeparator1.setBackground(new java.awt.Color(204, 204, 255));

        btnRefreshProduct.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bkap/images/icon/icons8_refresh_20px.png"))); // NOI18N
        btnRefreshProduct.setText("Làm mới");
        btnRefreshProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshProductActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbProduct)
                            .addComponent(lbModel)
                            .addComponent(lbNoteProduct))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(cbProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 184, Short.MAX_VALUE)
                                .addComponent(lbStatusProduct)
                                .addGap(18, 18, 18)
                                .addComponent(cbStatusProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txtModelNameProduct)))
                    .addComponent(jScrollPane4)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(btnRefreshProduct)
                        .addGap(168, 168, 168)
                        .addComponent(btnDeleteProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnUpdateProduct, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAddProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(msgForProduct, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGap(0, 385, Short.MAX_VALUE)
                        .addComponent(txtKeySearchModel, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSearchModel, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbProduct)
                    .addComponent(cbProduct, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbStatusProduct)
                    .addComponent(cbStatusProduct, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbModel)
                    .addComponent(txtModelNameProduct, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbNoteProduct)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnAddProduct)
                        .addComponent(btnUpdateProduct)
                        .addComponent(btnDeleteProduct, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnRefreshProduct))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(msgForProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnSearchModel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtKeySearchModel, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 736, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 40, Short.MAX_VALUE)))
        );

        btnUpdateRoom.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bkap/images/icon/icons8_edit_20px.png"))); // NOI18N
        btnUpdateRoom.setText("Lưu");
        btnUpdateRoom.setEnabled(false);
        btnUpdateRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateRoomActionPerformed(evt);
            }
        });

        btnAddRoom.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bkap/images/icon/icons8_add_20px.png"))); // NOI18N
        btnAddRoom.setText("Thêm");
        btnAddRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddRoomActionPerformed(evt);
            }
        });

        btnDeleteRoom.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bkap/images/icon/icons8_remove_20px.png"))); // NOI18N
        btnDeleteRoom.setText("Xóa");
        btnDeleteRoom.setEnabled(false);
        btnDeleteRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteRoomActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(msgInformation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(310, 310, 310)
                        .addComponent(btnDeleteRoom)
                        .addGap(18, 18, 18)
                        .addComponent(btnUpdateRoom)
                        .addGap(18, 18, 18)
                        .addComponent(btnAddRoom))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 551, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(msgInformation, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnUpdateRoom)
                        .addComponent(btnAddRoom)
                        .addComponent(btnDeleteRoom)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnChooseImgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseImgActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter imgFilter = new FileNameExtensionFilter("jpeg", "jpg", "png");
        fileChooser.setFileFilter(imgFilter);
        fileChooser.setMultiSelectionEnabled(true);

        if (fileChooser.showOpenDialog(jPanel1) == JFileChooser.APPROVE_OPTION) {
            filesImg = fileChooser.getSelectedFiles();
            txtNumOfImg.setText(filesImg.length + " ảnh");
        }
    }//GEN-LAST:event_btnChooseImgActionPerformed

    private void btnAddRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddRoomActionPerformed
        if (listCheckoutProduct.isEmpty()) {
            Utils.setMessageInformation(msgInformation, "Thiết bị trong phòng chưa được thêm!", false);
        } else {
            getValueOfFields();

            // save room
            saveImage();
            Room r = setPropertiesForObject(new Room());
            roomId = roomDAO.add(r);
            listRoom = roomDAO.findAll();
            setDataTable(modeTablelRoom, listRoom);

            //save product
            for (CheckoutProductDetails c : listCheckoutProduct) {
                c.setRoomId(roomId);
                checkoutProDAO.add(c);
            }
            listCheckoutProduct.clear();
            setDataTable(modelTableProduct, listCheckoutProduct);

            setNullFieldsForRoom();
            Utils.setMessageInformation(msgInformation, SystemConstant.MSG_SUCCESSFUL_UPDATE, true);
        }
    }//GEN-LAST:event_btnAddRoomActionPerformed

    private void cbCategoryRoomItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbCategoryRoomItemStateChanged
        String catRoomSelected = cbCategoryRoom.getSelectedItem().toString();

        for (CategoryRoom c : listCategoryRoom) {
            if (c.getName().equals(catRoomSelected)) {
                txtPrice.setText(Utils.formatPrice(c.getPrice()));
            }
        }
    }//GEN-LAST:event_cbCategoryRoomItemStateChanged

    private void btnDeleteRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteRoomActionPerformed
        int reply = JOptionPane.showConfirmDialog(rootPane, SystemConstant.CONFIRM_DELETE);
        if (reply == 0) {
            indexSelected = tblRoom.getSelectedRow();

            if (indexSelected == -1) {
                Utils.setMessageInformation(msgInformation, SystemConstant.MSG_ERROR_CHOOSE_ROW_TABLE, false);
            } else {

                // delete related product 
                for (CheckoutProductDetails c : listCheckoutProduct) {
                    checkoutProDAO.delete(c.getRoomId());
                }
                listCheckoutProduct.clear();
                setNullFieldsForProduct();
                setDataTable(modelTableProduct, listCheckoutProduct);

                // delete room
                roomDAO.delete(roomId);
                setNullFieldsForRoom();

                listRoom = roomDAO.findAll();
                setDataTable(modeTablelRoom, listRoom);
                Utils.setMessageInformation(msgInformation, SystemConstant.MSG_SUCCESSFUL_UPDATE, true);
            }
        }
    }//GEN-LAST:event_btnDeleteRoomActionPerformed

    private void btnUpdateRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateRoomActionPerformed

        int reply = JOptionPane.showConfirmDialog(rootPane, SystemConstant.CONFIRM_UPDATE);

        if (reply == 0) {
            indexSelected = tblRoom.getSelectedRow();

            if (indexSelected == -1) {
                Utils.setMessageInformation(msgInformation, SystemConstant.MSG_ERROR_CHOOSE_ROW_TABLE, false);
            } else {
                getValueOfFields();

                // update product
                checkoutProDAO.delete(roomId);
                for (CheckoutProductDetails c : listCheckoutProduct) {
                    checkoutProDAO.add(c);
                }
                listCheckoutProduct.clear();
                setDataTable(modelTableProduct, listCheckoutProduct);

                // update room
                saveImage();
                Room r = setPropertiesForObject(new Room());
                roomDAO.edit(r);
                setNullFieldsForRoom();
                Utils.setMessageInformation(msgInformation, SystemConstant.MSG_SUCCESSFUL_UPDATE, true);

                listRoom = roomDAO.findAll();
                setDataTable(modeTablelRoom, listRoom);

            }
        }
    }//GEN-LAST:event_btnUpdateRoomActionPerformed

    private void tblRoomMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblRoomMouseClicked
        btnAddRoom.setEnabled(false);
        btnDeleteRoom.setEnabled(true);
        btnUpdateRoom.setEnabled(true);

        cbStatusRoom.setEnabled(true);

        msgForProduct.setText("");
        msgInformation.setText("");

        // set datacbStatusRoomSearch        indexSelected = tblRoom.getSelectedRow();
        indexSelected = tblRoom.getSelectedRow();
        Room r = listRoom.get(indexSelected);
        roomId = r.getRoomId();
        strRoomId = r.getRoomId() + "";
        txtRoomId.setText(r.getRoomId() + "");
        txtRoomDescript.setText(r.getDescript());

        imageRoom = r.getImage();
        if (imageRoom.equals("[]")) {
            txtNumOfImg.setText("0 ảnh");
        } else {
            String numOfImg[] = imageRoom.substring(1, imageRoom.length() - 2).split(",");
            nameImg.clear();
            for (int i = 0; i < numOfImg.length; i++) {
                nameImg.add(numOfImg[i]);
            }
            txtNumOfImg.setText(nameImg.size() + " ảnh");
        }
        for (CategoryRoom c : listCategoryRoom) {
            if (c.getId() == r.getTypeId()) {
                cbCategoryRoom.setSelectedItem(c.getName());
            }
        }

        if (r.getStatus() == SystemConstant.STATUS_ROOM_EMPTY) {
            cbStatusRoom.setSelectedItem(SystemConstant.STATUS_TXT_ROOM_EMPTY);
        } else if (r.getStatus() == SystemConstant.STATUS_ROOM_USING) {
            cbStatusRoom.setSelectedItem(SystemConstant.STATUS_TXT_ROOM_USING);
        } else {
            cbStatusRoom.setSelectedItem(SystemConstant.STATUS_ROOM_REPAIRING);
        }

        // set data for product
        listCheckoutProduct = checkoutProDAO.findByRoomId(roomId);

        setDataTable(modelTableProduct, listCheckoutProduct);
    }//GEN-LAST:event_tblRoomMouseClicked

    private void btnAddProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddProductActionPerformed
        getValueOfFields();
        if (checkValidate()) {
            CheckoutProductDetails c = setPropertiesForObject(new CheckoutProductDetails());
            listCheckoutProduct.add(c);
            setDataTable(modelTableProduct, listCheckoutProduct);
            Utils.setMessageInformation(msgForProduct, SystemConstant.MSG_SUCCESSFUL_UPDATE, true);
            setNullFieldsForProduct();
        }
    }//GEN-LAST:event_btnAddProductActionPerformed

    private void tblProductMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblProductMouseClicked
        msgForProduct.setText("");
        msgInformation.setText("");
        cbProduct.setEnabled(false);
        cbStatusProduct.setEnabled(true);
        btnAddProduct.setEnabled(false);
        btnDeleteProduct.setEnabled(true);
        btnUpdateProduct.setEnabled(true);
        txtModelNameProduct.setEditable(false);

        indexSelected = tblProduct.getSelectedRow();
        CheckoutProductDetails c = listCheckoutProduct.get(indexSelected);
        roomId = c.getRoomId();
        txtModelNameProduct.setText(c.getModel());
        txtProductDescript.setText(c.getDescript());
        for (Product p : listProduct) {
            if (p.getId() == c.getProId()) {
                cbProduct.setSelectedItem(p.getName());
            }
        }
        if (c.getStatus() == SystemConstant.STATUS_PRODUCT_NORMAL) {
            cbStatusProduct.setSelectedItem(SystemConstant.STATUS_TXT_PRODUCT_NORMAL);
        } else {
            cbStatusProduct.setSelectedItem(SystemConstant.STATUS_TXT_PRODUCT_ABNORMAL);
        }
    }//GEN-LAST:event_tblProductMouseClicked

    private void btnDeleteProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteProductActionPerformed
        indexSelected = tblProduct.getSelectedRow();
        if (indexSelected == -1) {
            Utils.setMessageInformation(msgForProduct, SystemConstant.MSG_ERROR_CHOOSE_ROW_TABLE, false);
        } else {
            int reply = JOptionPane.showConfirmDialog(rootPane, SystemConstant.CONFIRM_DELETE);
            if (reply == 0) {
                listCheckoutProduct.remove(indexSelected);
                setDataTable(modelTableProduct, listCheckoutProduct);
                Utils.setMessageInformation(msgForProduct, SystemConstant.MSG_SUCCESSFUL_UPDATE, true);
                setNullFieldsForProduct();
            }
        }
    }//GEN-LAST:event_btnDeleteProductActionPerformed

    private void btnUpdateProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateProductActionPerformed
        indexSelected = tblProduct.getSelectedRow();
        if (indexSelected == -1) {
            Utils.setMessageInformation(msgForProduct, SystemConstant.MSG_ERROR_CHOOSE_ROW_TABLE, false);
        } else {
            CheckoutProductDetails c = listCheckoutProduct.get(indexSelected);
            getValueOfFields();
            c = setPropertiesForObject(c);
            listCheckoutProduct.set(indexSelected, c);
            setDataTable(modelTableProduct, listCheckoutProduct);

            Utils.setMessageInformation(msgForProduct, SystemConstant.MSG_SUCCESSFUL_UPDATE, true);
            setNullFieldsForProduct();
        }
    }//GEN-LAST:event_btnUpdateProductActionPerformed

    private void btnRefeshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefeshActionPerformed
        setNullFieldsForProduct();
        setNullFieldsForRoom();
        listCheckoutProduct.clear();
        listRoom = roomDAO.findAll();
        setDataTable(modeTablelRoom, listRoom);
        setDataTable(modelTableProduct, listCheckoutProduct);

        cbProduct.setEnabled(true);
        cbStatusRoom.setEnabled(false);
        txtModelNameProduct.setText("");
        txtModelNameProduct.setEditable(true);
        txtKeySearchModel.setText("");

        btnAddProduct.setEnabled(true);
        btnUpdateProduct.setEnabled(false);
        btnDeleteProduct.setEnabled(false);
        
        cbModelStatusRoomSearch.setSelectedItem("Tất cả");
    }//GEN-LAST:event_btnRefeshActionPerformed

    private void btnSearchModelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchModelActionPerformed
        String keySearch = txtKeySearchModel.getText();
        listCheckoutProduct = checkoutProDAO.findByModel(keySearch, roomId);
        setDataTable(modelTableProduct, listCheckoutProduct);
    }//GEN-LAST:event_btnSearchModelActionPerformed

    private void btnRefreshProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshProductActionPerformed
        setNullFieldsForProduct();
        cbStatusProduct.setEnabled(false);
        cbProduct.setEnabled(true);
        btnDeleteProduct.setEnabled(false);
        btnUpdateProduct.setEnabled(false);
        btnAddProduct.setEnabled(true);

        listCheckoutProduct = checkoutProDAO.findByRoomId(roomId);
        setDataTable(modelTableProduct, listCheckoutProduct);
    }//GEN-LAST:event_btnRefreshProductActionPerformed

    private void txtKeySearchRoomFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtKeySearchRoomFocusGained
        if (txtKeySearchRoom.getText().equals("Tên phòng")) {
            txtKeySearchRoom.setText("");
            txtKeySearchRoom.setForeground(Color.black);
        }
    }//GEN-LAST:event_txtKeySearchRoomFocusGained

    private void txtKeySearchRoomFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtKeySearchRoomFocusLost
        if (txtKeySearchRoom.getText().isEmpty()) {
            txtKeySearchRoom.setText("Tên phòng");
            txtKeySearchRoom.setForeground(new Color(153, 153, 153));
        }
    }//GEN-LAST:event_txtKeySearchRoomFocusLost

    private void btnSearchRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchRoomActionPerformed
        String keySearchRoomId = txtKeySearchRoom.getText();

        if (!keySearchRoomId.matches("^[0-9]+$")) {
            Utils.setMessageInformation(msgInformation, "Vui lòng nhập tên phòng đúng định dạng!", false);
        } else {
            listRoom.clear();
            listRoom.add(roomDAO.findByRoomId(Integer.parseInt(keySearchRoomId)));
            setDataTable(modeTablelRoom, listRoom);
            if (listRoom.isEmpty()) {
                Utils.setMessageInformation(msgInformation, "Không tìm thấy phòng!", false);
            } else {
                msgInformation.setText("");
            }
        }

    }//GEN-LAST:event_btnSearchRoomActionPerformed

    private void cbStatusRoomSearchItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbStatusRoomSearchItemStateChanged
        String keySearchRoomStatus = cbStatusRoomSearch.getSelectedItem().toString();
        if (keySearchRoomStatus.equals("Tất cả")) {
            listRoom = roomDAO.findAll();
        } else if (keySearchRoomStatus.equals(SystemConstant.STATUS_TXT_ROOM_EMPTY)) {
            listRoom = roomDAO.findByStatus(SystemConstant.STATUS_ROOM_EMPTY);
        } else if (keySearchRoomStatus.equals(SystemConstant.STATUS_TXT_ROOM_USING)) {
            listRoom = roomDAO.findByStatus(SystemConstant.STATUS_ROOM_USING);
        } else {
            listRoom = roomDAO.findByStatus(SystemConstant.STATUS_ROOM_REPAIRING);
        }
        if (listRoom.isEmpty()) {
            Utils.setMessageInformation(msgInformation, "Không tìm thấy phòng!", false);
        } else {
            msgInformation.setText("");
        }
        setDataTable(modeTablelRoom, listRoom);
    }//GEN-LAST:event_cbStatusRoomSearchItemStateChanged

    private boolean checkValidate() {
        boolean check = false;
        if (modelNameProduct.isEmpty()) {
            Utils.setMessageInformation(msgForProduct, "Vui lòng nhập tên model sản phẩm!", false);
        } else {
            return true;
        }
        return check;
    }

    public static Boolean getCheckFormPro() {
        return checkFormPro;
    }

    private void saveImage() {
        if (filesImg.length > 0) {
            File dir = new File(pathDirImage);
            if (dir.exists()) {
                Path sourceDirectory = null;
                Path targetDirectory = null;

                for (int i = 0; i < filesImg.length; i++) {
                    sourceDirectory = Paths.get(filesImg[i].getAbsolutePath());
                    targetDirectory = Paths.get(pathDirImage + sourceDirectory.getFileName());
                    nameImg.add(pathDirImage + sourceDirectory.getFileName().toString());
                    imageRoom = nameImg.toString();
                    try {
                        //copy source to target using Files Class
                        Files.copy(sourceDirectory, targetDirectory, StandardCopyOption.REPLACE_EXISTING);

                    } catch (IOException ex) {
                        Logger.getLogger(UserIF.class
                                .getName()).log(java.util.logging.Level.SEVERE, null, ex);
                    }
                }
            }
        }
    }

    private void setNullFieldsForRoom() {
        btnAddRoom.setEnabled(true);
        btnDeleteRoom.setEnabled(false);
        btnUpdateRoom.setEnabled(false);

        msgForProduct.setText("");
        txtRoomId.setText("");
        txtRoomDescript.setText("");
        txtNumOfImg.setText("");
        nameImg.clear();
        filesImg = new File[0];
    }

    private void setNullFieldsForProduct() {
        txtModelNameProduct.setText("");
        txtProductDescript.setText("");
        txtKeySearchModel.setText("");

        btnUpdateProduct.setEnabled(false);
        btnDeleteProduct.setEnabled(false);
        btnAddProduct.setEnabled(true);

        cbProduct.setEnabled(true);
        cbStatusProduct.setEnabled(false);

        txtModelNameProduct.setEditable(true);
        cbStatusProduct.setSelectedItem(SystemConstant.STATUS_TXT_PRODUCT_NORMAL);
    }

    private void getValueOfFields() {
        strRoomId = txtRoomId.getText();
        typeRoom = cbModelCategoryRoom.getSelectedItem().toString();
        priceRoom = txtPrice.getText().replace(".", "");
        descriptRoom = txtRoomDescript.getText();
        statusRoom = cbStatusRoom.getSelectedItem().toString();

        modelNameProduct = txtModelNameProduct.getText();
        nameProduct = cbProduct.getSelectedItem().toString();
        descriptProduct = txtProductDescript.getText();
        statusProduct = cbStatusProduct.getSelectedItem().toString();

    }

    private <T> T setPropertiesForObject(T t) {
        if (t instanceof Room) {
            Room r = (Room) t;
            if (!strRoomId.isEmpty()) {
                r.setRoomId(Integer.parseInt(strRoomId));
            }
            for (CategoryRoom c : listCategoryRoom) {
                if (c.getName().equals(typeRoom)) {
                    r.setTypeId(c.getId());
                }
            }
            r.setImage(nameImg.toString());
            r.setDescript(descriptRoom);
            if (statusRoom.equals(SystemConstant.STATUS_TXT_ROOM_EMPTY)) {
                r.setStatus(SystemConstant.STATUS_ROOM_EMPTY);
            } else if (statusRoom.equals(SystemConstant.STATUS_TXT_ROOM_USING)) {
                r.setStatus(SystemConstant.STATUS_ROOM_USING);
            } else {
                r.setStatus(SystemConstant.STATUS_ROOM_REPAIRING);
            }

            return (T) r;
        } else if (t instanceof CheckoutProductDetails) {
            CheckoutProductDetails c = (CheckoutProductDetails) t;
            for (Product p : listProduct) {
                if (p.getName().equals(nameProduct)) {
                    c.setProId(p.getId());
                }
            }
            c.setModel(modelNameProduct);
            c.setRoomId(roomId);
            c.setDescript(descriptProduct);
            if (statusProduct.equals(SystemConstant.STATUS_TXT_PRODUCT_NORMAL)) {
                c.setStatus(SystemConstant.STATUS_PRODUCT_NORMAL);
            } else {
                c.setStatus(SystemConstant.STATUS_PRODUCT_ABNORMAl);
            }
            return (T) c;
        }
        return null;
    }

    private void setComboxStatusRoom() {
        cbModelStatusRoom.addElement(SystemConstant.STATUS_TXT_ROOM_EMPTY);
        cbModelStatusRoom.addElement(SystemConstant.STATUS_TXT_ROOM_USING);
        cbModelStatusRoom.addElement(SystemConstant.STATUS_TXT_ROOM_REPAIRING);
    }
    
    private void setComboxStatusRoomSearch() {
        cbModelStatusRoomSearch.addElement("Tất cả");
        cbModelStatusRoomSearch.addElement(SystemConstant.STATUS_TXT_ROOM_EMPTY);
        cbModelStatusRoomSearch.addElement(SystemConstant.STATUS_TXT_ROOM_USING);
        cbModelStatusRoomSearch.addElement(SystemConstant.STATUS_TXT_ROOM_REPAIRING);
    }

    private void setComboxStatusProduct() {
        cbModelStatusProduct.addElement(SystemConstant.STATUS_TXT_PRODUCT_NORMAL);
        cbModelStatusProduct.addElement(SystemConstant.STATUS_TXT_PRODUCT_ABNORMAL);
    }

    private <T> void setDataCombox(DefaultComboBoxModel modelCombox, List<T> list) {
        for (T t : list) {
            if (t instanceof Product) {
                modelCombox.addElement(((Product) t).getName());
            } else if (t instanceof CategoryRoom) {
                modelCombox.addElement(((CategoryRoom) t).getName());
            }
        }
    }

    private <T> void setDataTable(DefaultTableModel modelTable, List<T> list) {
        modelTable.setRowCount(0);
        for (T t : list) {
            if (t instanceof Room) {
                Room r = (Room) t;
                for (CategoryRoom c : listCategoryRoom) {
                    if (c.getId() == r.getTypeId()) {
                        modelTable.addRow(new Object[]{
                            r.getRoomId(), c.getName(), Utils.formatPrice(c.getPrice()), r.getDescript()
                        });
                    }
                }
            } else if (t instanceof CheckoutProductDetails) {
                CheckoutProductDetails c = (CheckoutProductDetails) t;
                for (Product p : listProduct) {
                    if (p.getId() == c.getProId()) {
                        modelTable.addRow(new Object[]{
                            p.getName(), c.getModel(), c.getStatus() == SystemConstant.STATUS_PRODUCT_NORMAL ? "Mới" : "Hư hỏng"
                        });
                    }
                }
            }
        }
    }
    
    private void setNameLabelAndButton() {
        lbCategoryRoom.setText(Helper.getResources("categoryRoom"));
        lbImgDescript.setText(Helper.getResources("image"));
        lbModel.setText(Helper.getResources("model"));
        lbNameRoom.setText(Helper.getResources("nameRoom"));
        lbNoteProduct.setText(Helper.getResources("note"));
        lbNoteRoom.setText(Helper.getResources("note"));
        lbProduct.setText(Helper.getResources("product"));
        lbRoomPrice.setText(Helper.getResources("priceRoom"));
        lbStatusProduct.setText(Helper.getResources("status"));
        lbStatusRoom.setText(Helper.getResources("status"));
        
        btnAddProduct.setText(Helper.getResources("addProduct"));
        btnAddRoom.setText(Helper.getResources("add"));
        btnDeleteProduct.setText(Helper.getResources("deleteProduct"));
        btnDeleteRoom.setText(Helper.getResources("delete"));
        btnRefreshProduct.setText(Helper.getResources("refresh"));
        btnRefesh.setText(Helper.getResources("refresh"));
        btnSearchModel.setText(Helper.getResources("searchModel"));
        btnSearchRoom.setText(Helper.getResources("search"));
        btnUpdateProduct.setText(Helper.getResources("updateProduct")); 
        btnUpdateRoom.setText(Helper.getResources("update")); 
        btnChooseImg.setText(Helper.getResources("chooseImg"));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddProduct;
    private javax.swing.JButton btnAddRoom;
    private javax.swing.JButton btnChooseImg;
    private javax.swing.JButton btnDeleteProduct;
    private javax.swing.JButton btnDeleteRoom;
    private javax.swing.JButton btnRefesh;
    private javax.swing.JButton btnRefreshProduct;
    private javax.swing.JButton btnSearchModel;
    private javax.swing.JButton btnSearchRoom;
    private javax.swing.JButton btnUpdateProduct;
    private javax.swing.JButton btnUpdateRoom;
    private javax.swing.JComboBox cbCategoryRoom;
    private javax.swing.JComboBox cbProduct;
    private javax.swing.JComboBox cbStatusProduct;
    private javax.swing.JComboBox cbStatusRoom;
    private javax.swing.JComboBox<String> cbStatusRoomSearch;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lbCategoryRoom;
    private javax.swing.JLabel lbImgDescript;
    private javax.swing.JLabel lbModel;
    private javax.swing.JLabel lbNameRoom;
    private javax.swing.JLabel lbNoteProduct;
    private javax.swing.JLabel lbNoteRoom;
    private javax.swing.JLabel lbProduct;
    private javax.swing.JLabel lbRoomPrice;
    private javax.swing.JLabel lbStatusProduct;
    private javax.swing.JLabel lbStatusRoom;
    private javax.swing.JLabel msgForProduct;
    private javax.swing.JLabel msgInformation;
    private javax.swing.JTable tblProduct;
    private javax.swing.JTable tblRoom;
    private javax.swing.JTextField txtKeySearchModel;
    private javax.swing.JTextField txtKeySearchRoom;
    private javax.swing.JTextField txtModelNameProduct;
    private javax.swing.JLabel txtNumOfImg;
    private javax.swing.JLabel txtPrice;
    private javax.swing.JTextArea txtProductDescript;
    private javax.swing.JTextArea txtRoomDescript;
    private javax.swing.JTextField txtRoomId;
    // End of variables declaration//GEN-END:variables
}
